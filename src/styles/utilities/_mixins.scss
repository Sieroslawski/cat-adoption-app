// Mixins
@use "variables" as *;

// Mixin for centering element
// with margin-left: auto
// and margin-right: auto;
@mixin mc($img: false) {
    margin: {
        left: auto;
        right: auto;
    }
    @if($img == true){
        display: block;
    }
}

// Mixin for clearing out
// margins and padding and
// setting the line-height to 1 
// ...useful mainly on typographic elements
@mixin flatten($list: false) {
    margin: 0;
    padding: 0;
    line-height: 1;
    @if($list == true){
        list-style: none;
    }
}

// Visually hide an element but
// still make it accessible to 
// a screen reader
@mixin visually-hidden {
    margin: -1px;
    padding: 0;
    width: 1px;
    height: 1px;
    overflow: hidden;
    clip: rect(0 0 0 0);
    clip: rect(0, 0, 0, 0);
    position: absolute;
}

// Clear margins
@mixin first-last-el-no-margin {
    > :first-child {
        margin-top: 0;
    }
    > :last-child {
        margin-bottom: 0;
    }
}

@mixin first-el-no-margin {
    > :first-child {
        margin-top: 0;
    }
}

@mixin last-el-no-margin {
    :last-child {
        margin-bottom: 0;
    }
}

// Mixin for setting foreground
// images to cover their container
// without distortion of the 
// image
// using object-fit cover
@mixin img-cover($abs-pos: true){
    @if($abs-pos){
        position: absolute;
        top: 0;
        left: 0;
    }
    object-fit: cover;
    width: 100%;
    height: 100%;
    display: block;
}

// Mixin for having an element
// sit on top of another and
// and cover the parent element
// completely
@mixin el-cover {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

// Mixin to set links
// to not have their
// default look
@mixin plain-link($c: white){
    text-decoration: none;
    color: $c;
}

// Function to set text-color to
// a light colour or a dark
// colour depending on the 
// provided background color;
@function contrast-text-color($bgc, $ltc: white, $dtc: black){
    @if(lightness($bgc) > 50){
        @return $dtc; // lighter background
    } @else {
        @return $ltc; // darker background 
    }
}

// Layout Mixins

// Mixins for creating a flex row of
// and evenly spacing out the
// elements along the row
@mixin flex-layout-row {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
}

// Center elements in a flex
// container
@mixin flex-center {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
}

@mixin grid($c: 2, $w: 1fr){
    display: grid;
    grid-template-columns: repeat($c, $w);
}

// Media Query Mixin
@mixin mq($w){
    @media (min-width: $w){
        @content;
    }
}

//Custom mixins
@mixin nav {    
    background-color: #8540c5;
    height: 8em;
}

@mixin nav-hover {
    text-decoration: underline solid;
    transition: text-decoration 2s ease-out;
    text-decoration-thickness: 5px;      
    color: $text-color-light;
    transition: 300ms ease-out;
}

@mixin paws {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    align-content: center;
    justify-content: space-around;
    align-items: center;
    margin-top: 5em;
}

@mixin buttons {
          border: 1px solid white;
          height: 40px;          
          border-radius: 10%;
          appearance: none;
          background-color: #fafbfcc2;
          border: 1px solid rgba(27, 31, 35, 0.15);
          border-radius: 6px;
          box-shadow: rgba(27, 31, 35, 0.04) 0 1px 0, rgba(255, 255, 255, 0.25) 0 1px 0 inset;
          box-sizing: border-box;
          color: #24292E;
          cursor: pointer;
          display: inline-block;
          font-family: -apple-system, system-ui, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
          font-size: 20px;
          font-weight: 500;
          line-height: 20px;
          list-style: none;
          padding: 10px 16px;  
          transition: background-color 0.2s cubic-bezier(0.3, 0, 0.5, 1);
}
